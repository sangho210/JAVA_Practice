SELECT * FROM CUSTOM;

-- 770322-1****** 주민번호뽑기

SELECT RPAD(SUBSTR(JUMIN, 1, 8),14,'*') JUMIN
FROM CUSTOM

--직업으로 인원수
SELECT JOB,COUNT(*) COUNT
FROM CUSTOM
GROUP BY JOB;

--성별로 인원수
SELECT SEX,COUNT(*)
FROM CUSTOM
GROUP BY SEX;



--자바 스위치  case문
SELECT
CASE SEX
WHEN '1' THEN '남자'
WHEN '0' THEN '여자'
END 성별,
COUNT(*) FROM CUSTOM
GROUP BY SEX;

DESC CUSTOM;





SELECT * FROM CUSTOM;

SELECT ADDR1, COUNT(*) COUNT
FROM CUSTOM
GROUP BY ADDR1;



SELECT * FROM COMPANY;

SELECT POSIT,COUNT(*) 인원, SUM(PAY) 총월급, MAX(PAY), MIN(PAY)
FROM COMPANY
GROUP BY POSIT;


-- SELECT 조건은 WHERE ( WHERE은 실제 메모리에 저장된 값에 )
-- GROUP BY 조건은 HAVING ( HAVING 메모리상의 내용에 조건을 건다 )
-- JOIN 조건은 ON

SELECT * FROM SALES;

SELECT USERID, COUNT(*), SUM(PRICE)
FROM SALES
GROUP BY USERID
HAVING COUNT(*) >=4;
--HAVING은 별칭을 사용하면 안된다.



SELECT USERID, USERNAME, AGE 나이, ADDR1
FROM CUSTOM
ORDER BY 나이 DESC;
--ORDER BY 는 별칭사용가능 '나이'

SELECT* FROM RESEARCH;

--대답을 0, 1 로표현하는 이유는 저장용량때문 1BYTE, 2BYTE의 차이 1GB, 2GB


--RESEARCH 에서 '예'라고 대답한사람 '아니오'라고 대답한사람의 수 구하기

SELECT ANSWER, COUNT(*)
FROM RESEARCH
GROUP BY ANSWER;

-- 스위치 케이스 답
SELECT
CASE ANSWER
WHEN 1 THEN '예'
WHEN 0 THEN '아니오'
END ANSWER, COUNT(*) NCOUNT
FROM RESEARCH
GROUP BY ANSWER;


--JOIN
--INNER JOIN(내부조인:EQUI JOIN)
--OUTER JOIN(외부조인)
--SELF JOIN
--NON-EQUI JOIN


SELECT * FROM CUSTOM;
SELECT * FROM COMPANY;


-- INNER JOIN
SELECT CUSTOM.USERID,USERNAME,AGE,ADDR1,JOB,COMPANY,POSIT,PAY
FROM CUSTOM, COMPANY
WHERE CUSTOM.USERID = COMPANY.USERID;

--nu7634한명의 정보만
SELECT CUSTOM.USERID,USERNAME,AGE,ADDR1,JOB,COMPANY,POSIT,PAY
FROM CUSTOM, COMPANY
WHERE CUSTOM.USERID = COMPANY.USERID AND COMPANY.USERID='nu7634'



SELECT CU.USERID,USERNAME,AGE,ADDR1,JOB,COMPANY,POSIT,PAY
FROM CUSTOM CU, COMPANY CO
WHERE CU.USERID = CO.USERID


--INNER JOIN - ON
SELECT CU.USERID,USERNAME,AGE,ADDR1,JOB,COMPANY,POSIT,PAY
FROM CUSTOM CU INNER JOIN COMPANY CO
ON CU.USERID = CO.USERID


/*
테이블 CUSTOM에서 USERID, USERNAME, POINT에서 PRODUCT, LOGIN 검색
*/
SELECT * FROM CUSTOM;
SELECT * FROM POINT;

SELECT CU.USERID,USERNAME, PRODUCT, LOGIN
FROM CUSTOM CU, POINT PO
WHERE CU.USERID = PO.USERID;

-- 로그인횟수가 10번 이상인사람
SELECT CU.USERID,USERNAME, PRODUCT, LOGIN
FROM CUSTOM CU, POINT PO
WHERE CU.USERID = PO.USERID AND LOGIN >= 10;

--INNER JOIN으로
SELECT CU.USERID,USERNAME, PRODUCT, LOGIN
FROM CUSTOM CU INNER JOIN POINT PO
ON CU.USERID = PO.USERID
AND LOGIN >= 10;


--OUTER JOIN


SELECT COUNT(*) FROM CUSTOM; - 494
SELECT COUNT(*) FROM COMPANY; - 490

SELECT CU.USERID, USERNAME, ADDR1, COMPANY, DEPT
FROM CUSTOM CU, COMPANY CO
WHERE CU.USERID = CO.USERID(+)

SELECT CU.USERID, USERNAME, ADDR1, COMPANY, DEPT
FROM CUSTOM CU LEFT OUTER JOIN COMPANY CO
ON CU.USERID = CO.USERID(+)

SELECT CU.USERID, USERNAME, ADDR1, COMPANY, DEPT
FROM CUSTOM CU, RIGHT OUTER JOIN COMPANY CO
ON CU.USERID = CO.USERID


SELECT CU.USERID, USERNAME, ADDR1, COMPANY, DEPT
FROM CUSTOM CU, COMPANY CO
WHERE CU.USERID = CO.USERID

--CROSS JOIN(상호조인)
SELECT AA.USERID, USERNAME, ADDR1,COMPANY,DEPT
FROM CUSTOM AA, COMPANY BB
--WHERE AA.USERID = DB.USERID;


--SELF JOIN
--unique
--CUSTOM 테이블에서 중복된이름이 존재하는지 검색,, 외워라
--DISTINCT 동일한값은 하나씩만 출력
SELECT DISTINCT AA.*
FROM CUSTOM AA, CUSTOM BB
WHERE AA.USERNAME = BB.USERNAME
AND AA.USERID <> BB.USERID
ORDER BY AA.USERNAME;


--제주도에 사는사람중 동명이인을 검색
SELECT DISTINCT SCHOL FROM CUSTOM;
SELECT * FROM CUSTOM WHERE ADDR1='제주도';


SELECT AA.*
FROM CUSTOM AA, CUSTOM BB
WHERE AA.USERNAME = BB.USERNAME
AND AA.USERID<>BB.USERID AND AA.ADDR1='제주도' AND BB.ADDR1= '제주도'



CUSTOM테이블에서 USERID, USERNAME
COMPANY테이블에서 COMPANY, DEPT
POINT 테이블에서 PRODUCT, LOGIN을 검색

SELECT * FROM CUSTOM;
SELECT * FROM COMPANY
SELECT * FROM POINT;

SELECT AA.USERID, USERNAME, COMPANY, DEPT, PRODUCT, LOGIN
FROM CUSTOM AA INNER JOIN COMPANY BB
ON AA.USERID = BB.USERID INNER JOIN POINT CC
ON AA.USERID = CC.USERID;

SELECT AA.USERID, USERNAME,COMPANY, DEPT, PRODUCT, LOGIN
FROM CUSTOM AA, COMPANY BB, POINT CC
WHERE AA.USERID = BB.USERID AND AA.USERID = CC.USERID



--고객별 구입한 제품의 총금액, 횟수
SELECT * FROM SALES;

SELECT USERID, COUNT(*) NCOUNT, SUM(PRICE) NSUM
FROM SALES
GROUP BY USERID
HAVING SUM(PRICE) >= 100000;         --별칭사용금지


--물건을 100만원이상 구입한 고객의 고객정보를 검색
SELECT * FROM CUSTOM;

SELECT AA.USERID, USERNAME, ADDR1, AGE, NCOUNT, NSUM
FROM CUSTOM AA,(SELECT USERID, COUNT(*) NCOUNT, SUM(PRICE) NSUM FROM SALES
GROUP BY USERID
HAVING SUM(PRICE) >= 100000) BB
WHERE AA.USERID = BB.USERID;


--operation
A=[1,2,5,6] B=[1,2,4]


A UNION ALL B = [1,2,5,6,1,2,4];
A UNION B = [1,2,4,5,6]
A MINUS B = [5,6]
A INTERSECT B = [1,2]               --교집합


SELECT * FROM CUSTOM
UNION ALL
SELECT * FROM CUSTOM;

--
SELECT * FROM CUSTOM;


CREATE TABLE JEJU
AS
SELECT * FROM CUSTOM WHERE ADDR1='제주도';


SELECT * FROM JEJU;   --제주도에 사느나람만 따로 저장된

CREATE TABLE SEOUL
AS
SELECT * FROM CUSTOM WHERE ADDR1 LIKE '서울%';

SELECT * FROM SEOUL; -- 서울에 사는사람만 따로 저장된

SELECT * FROM JEJU
UNION
SELECT * FROM SEOUL;














--SUBQUERY(하위쿼리)

SELECT COUNT(*) FROM CUSTOM;

SELECT * FROM CUSTOM;

SELECT AVG(PAY) FROM COMPANY;

SELECT USERID, COMPANY, DEPT, PAY,
ROUND((SELECT AVG(PAY) FROM COMPANY),0) 평균
FROM COMPANY;

SELECT USEID, COMPANY, DEPT, PAY, AVG(PAY) 평균
FROM COMPANY; --X


SELECT USERID, COMPANY, DEPT, PAY,
PAY - ROUND((SELECT AVG(PAY) FROM COMPANY),0) 평균 FROM COMPANY;

--CUSTOM 테이블에서 평균 나이보다 많은 고객정보를 검색
SELECT AVG(AGE) FROM CUSTOM;


SELECT * FROM CUSTOM
WHERE AGE >= 28;

--위의 예에 아래의 방식으로 변경 가능  28에 정확한 평균구하는 식 대입
SELECT * FROM CUSTOM
WHERE AGE >= (SELECT AVG(AGE) FROM CUSTOM);


--'COMPANY' 테이블에서 평균 월급보다 적은 월급을 받는 행을 검색
SELECT AVG(PAY) FROM COMPANY  -- 평균을 구한다.

SELECT * FROM COMPANY
WHERE PAY <= (SELECT AVG(PAY) FROM COMPANY);


-- 위의 사람들의 이름을 나타내라 .

SELECT * FROM CUSTOM
WHERE USERID IN (
SELECT USERID FROM COMPANY WHERE PAY <= (SELECT AVG(PAY) FROM COMPANY));



--현대 자동차에 근무하는 고객의 정보를 검색
SELECT * FROM COMPANY;

SELECT * FROM COMPANY
WHERE USERID IN (
SELECT USERID FROM COMPANY WHERE COMPANY LIKE '현대자동차%');

SELECT AA.*
FROM CUSTOM AA, COMPANY BB
WHERE AA.USERID = BB.USERID AND COMPANY LIKE '현대자동차%';

--SALES테이블에서 4회이상 물건을 구입한 고객의 정보를 검색
SELECT * FROM SALES;

--JOIN문으로 만들기
SELECT AA.*
FROM CUSTOM AA,
(SELECT USERID, COUNT(*) FROM SALES
GROUP BY USERID
HAVING COUNT(*) >= 4) BB
WHERE AA.USERID = BB.USERID;

--하위쿼리로 만들기
SELECT * FROM CUSTOM
WHERE USERID IN
(SELECT USERID FROM SALES
GROUP BY USERID HAVING COUNT(*)>=4)

/*
ANY, ALL
>ANY  범위값이 포함되면서 '최소값보다 커야됨'
<ANY  범위값이 포함되면서 '최대값보다 작아야됨'
>ALL  범위값이 포함이 안되면서 '최대값보다 커야함'
<ALL  범위값이 포함이 안되면서 '최소값보다 작아야함'
*/
SELECT POINT FROM CUSTOM WHERE ADDR1='제주도' ORDER BY POINT


-- 132-269
-- >ANY
SELECT USERID, USERNAME, POINT FROM CUSTOM
WHERE POINT >ANY (SELECT POINT FROM CUSTOM WHERE ADDR1='제주도');

SELECT USERID, USERNAME, POINT FROM CUSTOM
WHERE POINT > (SELECT MIN(POINT) FROM CUSTOM WHERE ADDR1='제주도');



-- <ANY 최대값보다 작아야함
SELECT USERID, USERNAME, POINT FROM CUSTOM
WHERE POINT <ANY (SELECT POINT FROM CUSTOM WHERE ADDR1='제주도');

SELECT USERID, USERNAME, POINT FROM CUSTOM
WHERE POINT < (SELECT MAX(POINT) FROM CUSTOM WHERE ADDR1='제주도');



-- >ALL 최대값보다 커야함
SELECT USERID, USERNAME, POINT FROM CUSTOM
WHERE POINT >ALL (SELECT POINT FROM CUSTOM WHERE ADDR1='제주도');

SELECT USERID, USERNAME, POINT FROM CUSTOM
WHERE POINT > (SELECT MAX(POINT) FROM CUSTOM WHERE ADDR1='제주도');

-- <ALL 최소값보다 작아야함
SELECT USERID, USERNAME, POINT FROM CUSTOM
WHERE POINT <ALL (SELECT POINT FROM CUSTOM WHERE ADDR1='제주도');

SELECT USERID, USERNAME, POINT FROM CUSTOM
WHERE POINT < (SELECT MIN(POINT) FROM CUSTOM WHERE ADDR1='제주도');

SELECT MIN(POINT) FROM CUSTOM;

--데이터추가
SELECT * FROM CUSTOM;
INSERT INTO CUSTOM(USERID, USERNAME, POINT) VALUES('A0001','KIM',120);
SELECT * FROM CUSTOM WHERE USERID='A0001';

SELECT * FROM CUSTOM WHERE AGE=70;

SELECT * FROM CUSTOM
WHERE POINT > ANY (SELECT POINT FROM CUSTOM WHERE AGE=70);

SELECT * FROM CUSTOM
WHERE POINT > ALL (SELECT POINT FROM CUSTOM WHERE AGE=70);

--데이터 지우기

DELETE CUSTOM WHERE USERID='AOOO1';

SELECT * FROM CUSTOM
WHERE USERID IN ('CI2541', 'ee9224');


SELECT * FROM CUSTOM
WHERE USERID IN (SELECT USERID FROM COMPANY WHERE COMPANY LIKE '현대자동차%');


SELECT * FROM CUSTOM
WHERE USERID =ANY (SELECT USERID FROM COMPANY WHERE COMPANY LIKE '현대자동차%');


SELECT * FROM CUSTOM
WHERE USERID NOT IN (SELECT USERID FROM COMPANY WHERE COMPANY LIKE '현대자동차%');


SELECT * FROM CUSTOM
WHERE USERID <>ALL (SELECT USERID FROM COMPANY WHERE COMPANY LIKE '현대자동차%');


SELECT * FROM CUSTOM
WHERE USERID IN (SELECT USERID FROM COMPANY WHERE COMPANY LIKE '현대자동차%');


--상관쿼리 - ()안의 내용을 독자적으로 실행할수없다.
SELECT * FROM CUSTOM
WHERE EXISTS (SELECT * FROM COMPANY
WHERE USERID = CUSTOM.USERID AND COMPANY LIKE '현대자동차%');


SELECT * FROM CUSTOM
WHERE USERID NOT IN (SELECT USERID FROM COMPANY WHERE COMPANY LIKE '현대자동차%');


SELECT * FROM CUSTOM
WHERE NOT EXISTS (SELECT * FROM COMPANY
WHERE USERID = CUSTOM.USERID AND COMPANY LIKE '현대자동차%');


SELECT * FROM CUSTOM WHERE ADDR1='경기도' AND AGE <=20;

SELECT * FROM (SELECT * FROM CUSTOM WHERE ADDR1='경기도') AA
WHERE AA.AGE <=20;

-- ROWNUM 일렬번호, 컬럼명을 다 나열해야함. * 사용할수없다.
SELECT ROWNUM, USERID, USERNAME FROM CUSTOM;

SELECT ROWNUM RNUM, DATA.* FROM
(SELECT * FROM CUSTOM) DATA


--PAIRWISE
--부서번호가 30번인 직원의 급여와 보너스가 같은 사원을 검색

SELECT PNAME,DNO,PAY,NVL(BONUS,-1)
FROM PERSONNEL
WHERE (PAY, NVL(BONUS,-1))
IN (SELECT PAY, NVL(BONUS,-1) FROM PERSONNEL WHERE DNO=30);

SELECT * FROM CUSTOM
WHERE POINT
IN(SELECT POINT FROM CUSTOM WHERE SCHOL='기타')
AND AGE
IN(SELECT AGE FROM CUSTOM WHERE SCHOL='기타');











